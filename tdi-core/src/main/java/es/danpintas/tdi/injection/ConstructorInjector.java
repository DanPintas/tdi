package es.danpintas.tdi.injection;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.function.Function;

import javax.inject.Provider;

import es.danpintas.reflect.TypeData;
import es.danpintas.tdi.exceptions.InjectException;
import es.danpintas.tdi.keys.BindingKey;

/**
 * {@link Constructor} injector.
 *
 * @param <T> Constructor declaring class.
 * @author danpintas
 */
public final class ConstructorInjector<T> extends ExecutableInjector {
    
    private final Constructor<? extends T> constructor;
    
    /**
     * Constructor.
     *
     * @param typeData    {@link TypeData} for the constructor class.
     * @param fun         {@link Function} retrieving the {@link Provider} for a {@link BindingKey}.
     * @param constructor {@link Constructor} to inject.
     */
    public ConstructorInjector(TypeData<? extends T> typeData,
                               Function<BindingKey<?>, Provider<?>> fun, Constructor<? extends T> constructor) {
        super(typeData, fun, constructor);
        this.constructor = constructor;
    }
    
    /**
     * Creates an instance calling the constructor with injected args.
     *
     * @return new instance generated by calling the constructor.
     */
    public T inject() {
        try {
            return constructor.newInstance(injectArgs());
        } catch (IllegalAccessException | InvocationTargetException | InstantiationException e) {
            throw new InjectException(e);
        }
    }
    
}
